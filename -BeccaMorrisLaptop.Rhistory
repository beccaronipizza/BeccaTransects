filter(!Total_Veg2 == 0) %>% #get rid of all rows that equal 0
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(Grass = GrGR + LeTr + MixedSeedlings) %>%
mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
select(-c('GrGR','LeTr','MixedSeedlings','PicklePups', 'SaPa','SaDe', 'SaSp', 'BaGr')) %>% #Don't need these columns
rename(SaPa = SaPa_new) %>%  #putting their original names back after the calculation above
rename(SaDe = SaDe_new) %>%
mutate(across(c(34:35), ~round(.,0))) %>%
pivot_longer(cols = SpFo:Grass,
names_to = "Species_code",
values_to = "Count_cover") %>%
mutate(Date = paste0(Year, "-", Month))
vegmetadata %>%
select(Transect_ID, Shoreline_End, Log_Presence)
View(VegDataNew)
VegDataMerged <- full_join(VegDataNew, vegmetadata, by = "Transect_ID") %>%
select(-c(...9:...12))
View(VegDataNew)
View(VegDataMerged)
VegDataNew <- vegdata %>%
mutate_at(c('MeIn', 'DiGr', 'RaSa', 'CaMa', 'SaSo', 'Lolium', 'FrSa', 'Fabiaceae','Vicia', 'Sonc', 'Xant', 'LeTr', 'Ranunculus','Taraxacum', 'Coytote_Bush','BoMa', 'DiSp'), as.numeric) %>%
mutate_if(is.numeric, list(~replace_na(., 0))) %>%
filter(!(BaGr_Type_1 == '7' | BaGr_Type_2 == '7')) %>% #remove rows where BaGr is coded as log
select(-BaGr_Type_1, -BaGr_Type_2, -Coytote_Bush, -Wrack, -Tot_Num_Species, -Shoot_Density, -Length_centimeters, -Patch_Type) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%    *I think we only want count data here, not percentages
mutate(Total_Veg2 = rowSums(across(SpFo:LeTr))) %>%  #strictly count data here
filter(!Total_Veg2 == 0) %>% #get rid of all rows that equal 0
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(Grass = GrGR + LeTr + MixedSeedlings) %>%
mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
select(-c('GrGR','LeTr','MixedSeedlings','PicklePups', 'SaPa','SaDe', 'SaSp', 'BaGr')) %>% #Don't need these columns
rename(SaPa = SaPa_new) %>%  #putting their original names back after the calculation above
rename(SaDe = SaDe_new) %>%
mutate(across(c(34:35), ~round(.,0))) %>%
#pivot_longer(cols = SpFo:Grass,
#             names_to = "Species_code",
#             values_to = "Count_cover") %>%
mutate(Date = paste0(Year, "-", Month))
vegmetadata %>%
select(Transect_ID, Shoreline_End, Log_Presence)
VegDataMerged <- full_join(VegDataNew, vegmetadata, by = "Transect_ID") %>%
select(-c(...9:...12))
View(VegDataMerged)
VegDataNew <- vegdata %>%
mutate_at(c('MeIn', 'DiGr', 'RaSa', 'CaMa', 'SaSo', 'Lolium', 'FrSa', 'Fabiaceae','Vicia', 'Sonc', 'Xant', 'LeTr', 'Ranunculus','Taraxacum', 'Coytote_Bush','BoMa', 'DiSp'), as.numeric) %>%
mutate_if(is.numeric, list(~replace_na(., 0))) %>%
filter(!(BaGr_Type_1 == '7' | BaGr_Type_2 == '7')) %>% #remove rows where BaGr is coded as log
select(-BaGr_Type_1, -BaGr_Type_2, -Coytote_Bush, -Wrack, -Tot_Num_Species, -Shoot_Density, -Length_centimeters, -Patch_Type) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%    *I think we only want count data here, not percentages
mutate(Total_Veg2 = rowSums(across(SpFo:LeTr))) %>%  #strictly count data here
filter(!Total_Veg2 == 0) %>% #get rid of all rows that equal 0
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
mutate(across(c('SaPa_new', 'SaDe_new'), ~round(., 0))) %>%
mutate(SaPa_new = if_else(SaPa_new > 25, 25, SaPa_new),
SaDe_new = if_else(SaDe_new > 25, 25, SaDe_new)) %>%
mutate(Grass = GrGR + LeTr + MixedSeedlings) %>%
mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
select(-c('GrGR','LeTr','MixedSeedlings','PicklePups', 'SaPa','SaDe', 'SaSp', 'BaGr')) %>% #Don't need these columns
rename(SaPa = SaPa_new) %>%  #putting their original names back after the calculation above
rename(SaDe = SaDe_new) %>%
mutate(across(c(34:35), ~round(.,0))) %>%
#pivot_longer(cols = SpFo:Grass,
#             names_to = "Species_code",
#             values_to = "Count_cover") %>%
mutate(Date = paste0(Year, "-", Month))
View(VegDataMerged)
VegDataNew <- vegdata %>%
mutate_at(c('MeIn', 'DiGr', 'RaSa', 'CaMa', 'SaSo', 'Lolium', 'FrSa', 'Fabiaceae','Vicia', 'Sonc', 'Xant', 'LeTr', 'Ranunculus','Taraxacum', 'Coytote_Bush','BoMa', 'DiSp'), as.numeric) %>%
mutate_if(is.numeric, list(~replace_na(., 0))) %>%
filter(!(BaGr_Type_1 == '7' | BaGr_Type_2 == '7')) %>% #remove rows where BaGr is coded as log
select(-BaGr_Type_1, -BaGr_Type_2, -Coytote_Bush, -Wrack, -Tot_Num_Species, -Shoot_Density, -Length_centimeters, -Patch_Type) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%    *I think we only want count data here, not percentages
mutate(Total_Veg2 = rowSums(across(SpFo:LeTr))) %>%  #strictly count data here
filter(!Total_Veg2 == 0) %>% #get rid of all rows that equal 0
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
#mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
#mutate(across(c('SaPa_new', 'SaDe_new'), ~round(., 0))) %>%
mutate(SaPa_new = if_else(SaPa_new > 25, 25, SaPa_new),
SaDe_new = if_else(SaDe_new > 25, 25, SaDe_new)) %>%
mutate(Grass = GrGR + LeTr + MixedSeedlings) %>%
mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
select(-c('GrGR','LeTr','MixedSeedlings','PicklePups', 'SaPa','SaDe', 'SaSp', 'BaGr')) %>% #Don't need these columns
rename(SaPa = SaPa_new) %>%  #putting their original names back after the calculation above
rename(SaDe = SaDe_new) %>%
mutate(across(c(34:35), ~round(.,0))) %>%
#pivot_longer(cols = SpFo:Grass,
#             names_to = "Species_code",
#             values_to = "Count_cover") %>%
mutate(Date = paste0(Year, "-", Month))
View(VegDataMerged)
VegDataNew <- vegdata %>%
mutate_at(c('MeIn', 'DiGr', 'RaSa', 'CaMa', 'SaSo', 'Lolium', 'FrSa', 'Fabiaceae','Vicia', 'Sonc', 'Xant', 'LeTr', 'Ranunculus','Taraxacum', 'Coytote_Bush','BoMa', 'DiSp'), as.numeric) %>%
mutate_if(is.numeric, list(~replace_na(., 0))) %>%
filter(!(BaGr_Type_1 == '7' | BaGr_Type_2 == '7')) %>% #remove rows where BaGr is coded as log
select(-BaGr_Type_1, -BaGr_Type_2, -Coytote_Bush, -Wrack, -Tot_Num_Species, -Shoot_Density, -Length_centimeters, -Patch_Type) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%    *I think we only want count data here, not percentages
mutate(Total_Veg2 = rowSums(across(SpFo:LeTr))) %>%  #strictly count data here
filter(!Total_Veg2 == 0) %>% #get rid of all rows that equal 0
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
#mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
#mutate(across(c('SaPa_new', 'SaDe_new'), ~round(., 0))) %>%
mutate(SaPa_new = if_else(SaPa_new > 25, 25, SaPa_new),
SaDe_new = if_else(SaDe_new > 25, 25, SaDe_new))
View(VegDataMerged)
VegDataNew <- vegdata %>%
mutate_at(c('MeIn', 'DiGr', 'RaSa', 'CaMa', 'SaSo', 'Lolium', 'FrSa', 'Fabiaceae','Vicia', 'Sonc', 'Xant', 'LeTr', 'Ranunculus', 'Taraxacum', 'Coytote_Bush','BoMa', 'DiSp', 'AtPx', 'PoAr', 'AcMa', 'GrSt', 'MixedSeedlings','GrGR', 'Melilotus', 'MePo'), as.numeric) %>%
mutate_if(is.numeric, list(~replace_na(., 0))) %>%
select(-BaGr_Type_1, -BaGr_Type_2, -Coytote_Bush, -Wrack, -Tot_Num_Species, -Shoot_Density, -Length_centimeters, -Patch_Type) %>%
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%      #combine and distribute picklepup category amongst the two species
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
mutate(across(c('SaPa_new', 'SaDe_new'), ~round(., 0))) %>%
mutate(SaPa_new = if_else(SaPa_new > 25, 25, SaPa_new),
SaDe_new = if_else(SaDe_new > 25, 25, SaDe_new)) %>%
mutate(Grass = GrGR + LeTr + MixedSeedlings) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_Veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%  #makes percentages out of the counts
mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
select(-c('GrGR','LeTr','MixedSeedlings','PicklePups', 'SaPa','SaDe', 'SaSp')) %>%  #removed SaSp so it would not be calculated as total veg in addition tot he SaPa and SaDe columns)) %>%
rename(SaPa = SaPa_new, SaDe = SaDe_new) %>% #putting their original names back after the calculation above
mutate(Total_Veg2 = rowSums(across(SpFo:Grass), na.rm =T)) %>% #Total_Veg2 adds all the total quadrants each species is present in and combining them all into one total count (can exceed 100)
mutate(Date = paste0(Year, "-", Month))
View(VegDataNew)
vegmetadata %>%
select(Transect_ID, Shoreline_End, Log_Presence)
VegDataMerged <- full_join(VegDataNew, vegmetadata, by = "Transect_ID") %>%
select(-c(...9:...12))
VegData_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
View(VegData_U)
View(VegDataMerged)
VegData_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),]
View(VegData_U)
VegData_M <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "M",]
VegData_L <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "L",]
?doubs
summary(Doubs.fish)
View(VegData_U)
View(VegDataMerged)
VegDataSpecies_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c(3, 7:34)]
View(VegDataSpecies_U)
View(VegDataSpecies_U)
VegDataSpecies_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c(3:5, 7:34)]
View(VegDataSpecies_U)
VegDataID_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "M",
#!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
View(VegDataID_U)
VegDataSpecies_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c(3, 7:34)]
VegDataID_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "M",
#!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
VegDataSpecies_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U" &
!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c(3, 7:34)]
VegDataID_U <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "U",
#!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
VegDataSpecies_M <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "M",
c(3, 7:34)]
VegDataID_M <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "M",
#!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
VegDataSpecies_L <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "L",
c(3, 7:34)]
VegDataID_L <- VegDataMerged[VegDataMerged$Date == "2022-June" & VegDataMerged$Zone == "L",
#!(VegDataMerged$Transect_ID == "C6-L174" & VegDataMerged$Quadrat == 3 & VegDataMerged$Zone == "U"),
c('Transect_ID', 'Distance_meters', 'Quadrat', 'Zone', 'Date', 'Shoreline_End', 'Log_Presence')]
library(readxl)
library(tidyverse)
library(ggplot2)
library(broom)
library(AICcmodavg)
library(glmmTMB)
library(lme4)
library(lubridate)
library(ggpubr)
library(moments) #for checking skewness
library(AER) #for checking overdispersion with Poissond data
library(MASS) #for runninga neg. bin. glm
library(DHARMa)
setwd("~/GitHub/BeccaTransects/data")
vegmetadata <- read_xlsx("~/GitHub/BeccaTransects/data/VegData_raw.xlsx", sheet = "Metadata")
vegdataLZ <- read_xlsx("~/GitHub/BeccaTransects/data/VegData_raw.xlsx", sheet = "Data_2_LZ")
vegdata3 <- vegdataLZ %>%
dplyr::select(Month, Year, Transect_ID, Distance_meters, Quadrat, Zone, SpFo, SaPa, SaDe, SpMa, PicklePups, BaGr_1, BaGr_2, Log_Zone) %>%
mutate(across(SpFo:BaGr_2, ~replace_na(.,0))) %>%
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%      #combine and distribute picklepup category amongst the two species
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
mutate(SaPa_new = ifelse(SaPa > 25, 25, SaPa_new)) %>%      #these lines tell it where these columns exceed 25 quad's, to just set them = to 25
mutate(SaDe_new = ifelse(SaDe_new > 25, 25, SaDe_new)) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
dplyr::select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_Veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%  #makes percentages out of the counts
#mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
dplyr::select(-c('PicklePups','SaPa','SaDe','SaSp')) %>% #removed SaSp column so it would not be counted as part of 'Total_Veg2' column in addition to the SaPa and SaDe columns
rename(SaPa = SaPa_new, SaDe = SaDe_new) %>% #putting their original names back after the calculation above
mutate(across(c('SaPa', 'SaDe'), ~round(., 0))) %>%
#mutate(across(SpFo:Grass, ~ .x*4)) %>% #makes everything into percentages
relocate(Log_Zone, .after = last_col()) %>%    #if you want to use log zone you need to upload the vegdata spreadsheet using the Data_2_LZ sheet
mutate(across(SpFo:Total_Veg, ~replace_na(.x,0))) %>%
mutate(Total_Veg2 = (rowSums(across(SpFo:SaDe)))) %>% #Total_Veg2 adds all the total quadrants each species is present in and combining them all into one total count (can exceed 100)
mutate(Date = paste0(Year, "-", Month)) %>%
filter(is.na(Log_Zone))  %>% #remove rows where the quad that lands on log and the one quad that lands above and below are marked as "R" for remove
relocate(Total_Veg2, .after = Total_Veg) %>%
mutate(across(SpFo:Total_Veg2, ~replace_na(.x,0)))
vegmetadata %>%
dplyr::select(Transect_ID, Shoreline_End, Log_Presence)
vegdatamerged <- full_join(vegdata3, vegmetadata, by = "Transect_ID") %>%
dplyr::select(-c(...9:...12)) %>%
mutate(Shoreline_End = factor(Shoreline_End, levels = c("west", "east")), #need to set these as factor to run a glmm
Zone = factor(Zone, levels = c("U", "M", "L")),
Log_Presence = factor(Log_Presence, levels = c("log", "no log")))
vegdata_2YRDiff <- vegdatamerged[(vegdatamerged$Log_Presence != "reference"),] %>%
filter(Date == "2022-June" | Date == "2023-August") %>%
group_by(Transect_ID, Quadrat) %>%
mutate(initial_count = first(Total_Veg2),
final_count = last(Total_Veg2),
count_difference = (final_count - initial_count)) %>%
ungroup() %>%
filter(!(Date == "2023-August")) %>%
filter(!(Transect_ID == "C3-BW47"))
ggdensity(vegdata_2YRDiff, x = "count_difference", fill = "lightgray", title = "count_difference") +
scale_x_continuous(limits = c(-50, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E2 <- resid(M2, type = "pearson")
M2 <- glm.nb(newcountdiff ~ Shoreline_End*Log_Presence,
data = vegdata_YR1Diff)
#Applying a sqrt transformation first for moderate/negative skewness.
#Nan's produced bc I have negative values. Need to add a fixed integer to the variable so the numbers are positive (variance/effect will remain the same as original data).
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 37) %>%
#mutate(sqrtnewcountdiff = sqrt(max(newcountdiff+1) - newcountdiff)) %>%
#mutate(log10sqrtnewcountdiff = log10(max(newcountdiff+1) - newcountdiff))
#skewness(vegdata_YR1Diff$sqrtnewcountdiff, na.rm = TRUE)  #skewness = -0.444 better!
#skewness(vegdata_YR1Diff$log10sqrtnewcountdiff, na.rm = TRUE) #skewness = -2.14 worse!
## Poisson GLM
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
#There is one big outlier so use the code below this chunk of code
vegdata_YR1Diff <- vegdatamerged[(vegdatamerged$Log_Presence != "reference"),] %>%
filter(Date == "2022-June" | Date == "2022-August") %>%
group_by(Transect_ID, Quadrat) %>%
mutate(initial_count = first(Total_Veg2),
final_count = last(Total_Veg2),
count_difference = (final_count - initial_count)) %>%
ungroup() %>%
filter(!(Date == "2022-August"))
#histogram:
hist(vegdata_YR1Diff$count_difference) #VERY zero-inflated
vegdata_YR1Diff <- vegdatamerged[(vegdatamerged$Log_Presence != "reference"),] %>%
filter(Date == "2022-June" | Date == "2022-August") %>%
group_by(Transect_ID, Quadrat) %>%
mutate(initial_count = first(Total_Veg2),
final_count = last(Total_Veg2),
count_difference = (final_count - initial_count)) %>%
ungroup() %>%
filter(!(Date == "2022-August")) %>%
filter(!(Transect_ID == "C3-L42" | Transect_ID == "C3-L44" |Transect_ID == "C2-L22" | Transect_ID == "C7-BW188"))
#Applying a sqrt transformation first for moderate/negative skewness.
#Nan's produced bc I have negative values. Need to add a fixed integer to the variable so the numbers are positive (variance/effect will remain the same as original data).
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 37) %>%
#mutate(sqrtnewcountdiff = sqrt(max(newcountdiff+1) - newcountdiff)) %>%
#mutate(log10sqrtnewcountdiff = log10(max(newcountdiff+1) - newcountdiff))
#skewness(vegdata_YR1Diff$sqrtnewcountdiff, na.rm = TRUE)  #skewness = -0.444 better!
#skewness(vegdata_YR1Diff$log10sqrtnewcountdiff, na.rm = TRUE) #skewness = -2.14 worse!
## Poisson GLM
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 37)
#Applying a sqrt transformation first for moderate/negative skewness.
#Nan's produced bc I have negative values. Need to add a fixed integer to the variable so the numbers are positive (variance/effect will remain the same as original data).
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 37) %>%
#mutate(sqrtnewcountdiff = sqrt(max(newcountdiff+1) - newcountdiff)) %>%
#mutate(log10sqrtnewcountdiff = log10(max(newcountdiff+1) - newcountdiff))
#skewness(vegdata_YR1Diff$sqrtnewcountdiff, na.rm = TRUE)  #skewness = -0.444 better!
#skewness(vegdata_YR1Diff$log10sqrtnewcountdiff, na.rm = TRUE) #skewness = -2.14 worse!
## Poisson GLM
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
M2 <- glm.nb(newcountdiff ~ Shoreline_End*Log_Presence,
data = vegdata_YR1Diff)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
M2 <- glm.nb(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
data = vegdata_YR1Diff)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
#Zip GLM
M3 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence*Zone |  ## Predictor for the Poisson process
Shoreline_End*Log_Presence*Zone, ## Predictor for the Bernoulli process;
dist = 'poisson',
data = vegdata_YR1Diff)
library(pscl)
library(lmtest)
M3 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence*Zone |  ## Predictor for the Poisson process
Shoreline_End*Log_Presence*Zone, ## Predictor for the Bernoulli process;
dist = 'poisson',
data = vegdata_YR1Diff)
min(mydata$newcountdiff)
min(vegdata_YR1Diff$newcountdiff)
min(vegdata_YR1Diff$count_difference)
M3 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence*Zone |  ## Predictor for the Poisson process
Shoreline_End*Log_Presence*Zone, ## Predictor for the Bernoulli process;
dist = 'poisson',
data = vegdata_YR1Diff)
min(vegdata_YR1Diff$newcountdiff)
View(vegdata_YR1Diff)
#Applying a sqrt transformation first for moderate/negative skewness.
#Nan's produced bc I have negative values. Need to add a fixed integer to the variable so the numbers are positive (variance/effect will remain the same as original data).
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 36) %>%
#mutate(sqrtnewcountdiff = sqrt(max(newcountdiff+1) - newcountdiff)) %>%
#mutate(log10sqrtnewcountdiff = log10(max(newcountdiff+1) - newcountdiff))
#skewness(vegdata_YR1Diff$sqrtnewcountdiff, na.rm = TRUE)  #skewness = -0.444 better!
#skewness(vegdata_YR1Diff$log10sqrtnewcountdiff, na.rm = TRUE) #skewness = -2.14 worse!
## Poisson GLM
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
vegdata_YR1Diff <- vegdata_YR1Diff %>%
mutate(newcountdiff = count_difference + 36)
M1 <- glm(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
family = 'poisson',
data = vegdata_YR1Diff)
E2 <- resid(M1, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M1))
sum(E2^2) / (N - p)
dispersiontest(M1)
M2 <- glm.nb(newcountdiff ~ Shoreline_End*Log_Presence*Zone,
data = vegdata_YR1Diff)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
dispersiontest(M2)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
M3 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence*Zone |  ## Predictor for the Poisson process
Shoreline_End*Log_Presence*Zone, ## Predictor for the Bernoulli process;
dist = 'poisson',
data = vegdata_YR1Diff)
E2 <- resid(M3, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M3))
sum(E2^2) / (N - p)
M4 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence*Zone |
Shoreline_End*Log_Presence*Zone,
dist = 'negbin',
data = vegdata_YR1Diff)
det(vegdata_YR1Diff)
summary(M4)
#ZINB GLM
M4 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence |
Shoreline_End*Log_Presence,
dist = 'negbin',
data = vegdata_YR1Diff)
M4 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence |
Shoreline_End*Log_Presence,
dist = 'negbin',
data = vegdata_YR1Diff)
M4 <- zeroinfl(newcountdiff ~ Shoreline_End*Zone |
Shoreline_End*Log_Presence*Zone,
dist = 'negbin',
data = vegdata_YR1Diff)
M4 <- zeroinfl(newcountdiff ~ Shoreline_End*Log_Presence |
Shoreline_End*Log_Presence,
dist = 'negbin',
data = vegdata_YR1Diff)
summary(M1)
E2 <- resid(M1, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M1))
sum(E2^2) / (N - p)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
summary(M2)
E2 <- resid(M2, type = "pearson")
N  <- nrow(vegdata_YR1Diff)
p  <- length(coef(M2)) + 1  # '+1' is for variance parameter in NB
sum(E2^2) / (N - p)
library(readxl)
library(tidyverse)
library(ggplot2)
library(broom)
library(AICcmodavg)
library(glmmTMB)
library(lme4)
library(bbmle)
library(pscl)
library(lmtest) #runs a likelyhood ratio test
setwd("~/GitHub/BeccaTransects/data")
vegmetadata <- read_xlsx("~/GitHub/BeccaTransects/data/VegData_raw.xlsx", sheet = "Metadata")
vegdata <- read_xlsx("~/GitHub/BeccaTransects/data/VegData_raw.xlsx", sheet = "Data_2_LZ")
vegdata4 <- vegdata %>%
dplyr::select(Month, Year, Transect_ID, Distance_meters, Quadrat, Zone, SpFo, SaPa, SaDe, SpMa, PicklePups, BaGr_1, BaGr_2, Log_Zone) %>%
mutate(across(SpFo:BaGr_2, ~replace_na(.,0))) %>%
mutate(SaSp = SaPa + SaDe) %>%
mutate(SaPa_new = SaPa + ((SaPa/SaSp)*PicklePups)) %>%      #combine and distribute picklepup category amongst the two species
mutate(SaDe_new = SaDe + ((SaDe/SaSp)*PicklePups)) %>%
mutate(across(c('SaPa_new', 'SaDe_new'),(~replace_na(., 0)))) %>%   #where the calculations above = 0, R was turning them into NaN's
mutate(SaPa_new = ifelse(SaPa > 25, 25, SaPa_new)) %>%      #these lines tell it where these columns exceed 25 quad's, to just set them = to 25
mutate(SaDe_new = ifelse(SaDe_new > 25, 25, SaDe_new)) %>%
mutate(BaGr = rowSums(across(BaGr_1:BaGr_2), na.rm = T)) %>%
dplyr::select(-BaGr_1, -BaGr_2) %>%
mutate(Total_Veg = 25-BaGr) %>%  #Total_Veg is simply what is remaining after subtracting the bare ground
#mutate(across(SpFo:Total_Veg, ~ .x*4)) %>%  #makes percentages out of the counts
#mutate(across(everything(), ~replace(.x, is.nan(.x), 0))) %>%
dplyr::select(-c('PicklePups','SaPa','SaDe','SaSp')) %>% #removed SaSp column so it would not be counted as part of 'Total_Veg2' column in addition to the SaPa and SaDe columns
rename(SaPa = SaPa_new, SaDe = SaDe_new) %>% #putting their original names back after the calculation above
mutate(across(c('SaPa', 'SaDe'), ~round(., 0))) %>%
#mutate(across(SpFo:Grass, ~ .x*4)) %>% #makes everything into percentages
relocate(Log_Zone, .after = last_col()) %>%    #if you want to use log zone you need to upload the vegdata spreadsheet using the Data_2_LZ sheet
mutate(across(SpFo:Total_Veg, ~replace_na(.x,0))) %>%
mutate(Total_Veg2 = (rowSums(across(SpFo:SaDe)))) %>% #Total_Veg2 adds all the total quadrants each species is present in and combining them all into one total count (can exceed 100)
mutate(Date = paste0(Year, "-", Month)) %>%
filter(is.na(Log_Zone))  %>% #remove rows where the quad that lands on log and the one quad that lands above and below are marked as "R" for remove
relocate(Total_Veg2, .after = Total_Veg) %>%
mutate(across(SpFo:Total_Veg2, ~replace_na(.x,0)))
vegmetadata %>%
dplyr::select(Transect_ID, Shoreline_End, Log_Presence)
vegdatamerged <- full_join(vegdata3, vegmetadata, by = "Transect_ID") %>%
dplyr::select(-c(...9:...12)) %>%
mutate(Shoreline_End = factor(Shoreline_End, levels = c("west", "east")), #need to set these as factor to run a glmm
Zone = factor(Zone, levels = c("U", "M", "L")),
Log_Presence = factor(Log_Presence, levels = c("log", "no log")))
hist(vegdatamerged$Total_Veg2) #data is majorly zero-inflated and overdispersed at zero adn around 25
View(vegdatamerged)
I1 <- is.na(vegdatamerged$Total_Veg2) |
is.na(vegdatamerged$Shoreline_End) |
is.na(vegdatamerged$Zone) |
is.na(vegdatamerged$Log_Presence)
vegdatamerged2 <- vegdatamerged[!I1,]
plot(table(vegdatamerged2$Total_Veg2),
xlab = "Observed Total Veg Count Values",
ylab = "Frequencies")
vegdatamerged2 %>% filter(!(Transect_ID == "C7-L190" & Distance == "4" & Month == "April" & Year == "2023"))
vegdatamerged2 %>% filter(!(Transect_ID == "C7-L190" & Distance_meters == "4" & Month == "April" & Year == "2023"))
#Applies a zero-inflated model
f1 <- formula(Total_Veg2 ~ Shoreline_End*Zone*Log_Presence | Shoreline_End*Zone*Log_Presence) ###### IS this the correct formula?!?!
Nb1 <- zeroinfl(f1,dist = "negbin", link = "logit",  #ZANB
data = vegdatamerged2)
Zap1 <- zeroinfl(f1,dist = "poisson", link = "logit",  #ZAP
data = vegdatamerged2)
lrtest(Nb1, Zap1) #Chi^2 = 2.2 x e-16 *** so use the ZANB model?
summary(Nb1)
H1A <- hurdle(f1, dist = "poisson", link = "logit",  #ZAP
data = vegdatamerged2)
H1B <- hurdle(f1, dist = "negbin", link = "logit",  #ZANB
data = vegdatamerged2)
lrtest(H1A, H1B)   #Ho: use the Zap model. Hi: Use the ZANB model *Likelihood ratio test provides Chi^2 value of 2.2 X e-16 *** so I should use the ZANB model
AIC(H1A, H1B)     #AIC H1A = 72059.25 and H1B = 54331.17    *Choose model with the lower AIC value
View(vegdata)
hist(vegdatamerged$Total_Veg2) #data is majorly zero-inflated and overdispersed at zero and around 25
qqnorm(vegdatamerged$Total_Veg2, pch = 1, frame = FALSE)
qqline(vegdatamerged$Total_Veg2, col = "steelblue", lwd = 2)
hist(vegdatamerged$Total_Veg2)
